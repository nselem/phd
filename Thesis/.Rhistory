#gcolor$data[[1]]
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=15)
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=15)
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none",plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none"plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none",plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
# This chunk ensures that the reedtemplates package is installed and loaded
# This reedtemplates package includes the template files for the thesis and also
# two functions used for labeling and referencing
if(!require(devtools))
install.packages("devtools", repos = "http://cran.rstudio.com")
if(!require(reedtemplates)){
library(devtools)
devtools::install_github("ismayc/reedtemplates")
}
library(reedtemplates)
# List of packages required for this analysis
pkg <- c("dplyr", "ggplot2", "knitr", "devtools","RColorBrewer")
# Check if packages are not installed and assign the
# names of the packages not installed to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg))
install.packages(new.pkg, repos = "http://cran.rstudio.com")
# Load packages
library(dplyr)
library(plyr)
library(reshape)
library(ggplot2)
library(knitr)
library(RColorBrewer)
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
#library(genstats) ## Next libraries are for coursera
library(devtools)
library(Biobase)
library(scales) #
#library(xlsx) # For save data on excel
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none",plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=15)
#gcolor$data[[1]]["fill"]
#gcolor$data[[1]]
# This chunk ensures that the reedtemplates package is installed and loaded
# This reedtemplates package includes the template files for the thesis and also
# two functions used for labeling and referencing
if(!require(devtools))
install.packages("devtools", repos = "http://cran.rstudio.com")
if(!require(reedtemplates)){
library(devtools)
devtools::install_github("ismayc/reedtemplates")
}
library(reedtemplates)
# List of packages required for this analysis
pkg <- c("dplyr", "ggplot2", "knitr", "devtools","RColorBrewer")
# Check if packages are not installed and assign the
# names of the packages not installed to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg))
install.packages(new.pkg, repos = "http://cran.rstudio.com")
# Load packages
library(dplyr)
library(plyr)
library(reshape)
library(ggplot2)
library(knitr)
library(RColorBrewer)
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
#library(genstats) ## Next libraries are for coursera
library(devtools)
library(Biobase)
library(scales) #
#library(xlsx) # For save data on excel
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none",plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=15)
#gcolor$data[[1]]["fill"]
#gcolor$data[[1]]
docking.m
docking
docking$total=sum($docking[,X23])
docking[,X23]
docking[,X23]
docking[,23]
sum(docking[,23])
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking[,23]
apply(docking,2,sum)
apply(docking,2,mean)
apply(docking,2,mean)
apply(docking,2,mean)
apply(docking,2,max)
apply(as.numeric(docking),2,max)
apply(docking,2,mix)
apply(docking,2,min)
apply(docking,2,sum)
apply(docking[,-1],2,sum)
sort(apply(docking[,-1],2,sum))
revrse(sort(apply(docking[,-1],2,sum)))
reverse(sort(apply(docking[,-1],2,sum)))
rev(sort(apply(docking[,-1],2,sum)))
names(rev(sort(apply(docking[,-1],2,sum))))
cat (genomes,names(rev(sort(apply(docking[,-1],2,sum)))))
cat(genomes,names(rev(sort(apply(docking[,-1],2,sum)))))
cat("genomes",names(rev(sort(apply(docking[,-1],2,sum)))))
names(docking)
names(docking)<- factor(names(docking), levels = cat("genomes",names(rev(sort(apply(docking[,-1],2,sum))))))
docking
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
names(docking)<- factor(names(docking), levels = cat("genomes",names(rev(sort(apply(docking[,-1],2,sum))))))
docking.m <- melt(docking,id = "genome")
docking
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
names(docking)<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking
docking.m <- melt(docking,id = "genome")
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
names(docking)<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking
names(docking)
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
Colnames<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking
docking[,order(Colnames)]
docking
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking.m$variable
docking<-docking[,order(Colnames)]
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
Colnames<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
dockingS<-docking[,order(Colnames)]
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable
dockingS
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
Colnames<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
dockingS<-docking[,order(Colnames)]
dockingS
names(dockingS)
dockingS<-docking[genomeOrder,order(Colnames)]
dockingS
Colnames<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking[genomeOrder,order(Colnames)]
docking[genomeOrder,]
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking[genomeOrder,]
genomeOrder
docking[genomeOrder,]
docking<- factor(docking, levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
names(docking)<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking
names(docking)<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking
names(docking)
docking <- read.csv("chapter2/table05", sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking
names(docking)<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
names(docking)
#names(docking)<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking[,reorder(cat("genome",names(rev(sort(apply(docking[,-1],2,sum)))))))]
#names(docking)<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking[,reorder(cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))]
rev(sort(apply(docking[,-1],2,sum)))))
rev(sort(apply(docking[,-1],2,sum))))
rev(sort(apply(docking[,-1],2,sum)))
namesCol<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
namesCol<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
docking[,order(namesCol)]
docking
new<-docking[,order(namesCol)]
names(new)
namesCol
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking
namesCol<- factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
namesCol
factor(names(docking), levels = cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
cat("genome",names(rev(sort(apply(docking[,-1],2,sum)))))
new<-docking[,order( cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))]
new<-docking[,order( cat("genome",names(rev(sort(apply(docking[,-1],2,sum)))))))]
namesCol<- cat("genome",names(rev(sort(apply(docking[,-1],2,sum)))))
new<-docking[,order(namesCol)]
namesCol
cat("genome",names(rev(sort(apply(docking[,-1],2,sum)))))
namesCol<- cat("genome",names(rev(sort(apply(docking[,-1],2,sum)))))
namesCol<- cat("genome",names(rev(sort(apply(docking[,-1],2,sum)))))
cat("genome",names(rev(sort(apply(docking[,-1],2,sum)))))
namesCol
size(cat("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
c("genome",names(rev(sort(apply(docking[,-1],2,sum)))))
namesCol<- c("genome",names(rev(sort(apply(docking[,-1],2,sum)))))
namesCol
new<-docking[,order(namesCol)]
names(new)
namesCol<- factor(names(docking), levels = c("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
new<-docking[,order(namesCol)]
docking<-docking[,order(namesCol)]
names(docking)
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking<-docking[,order(as.factor(namesCol))]
names(docking)
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
names(docking)<- factor(names(docking), levels = c("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
names(docking)
docking<-docking[,order(as.factor(namesCol))]
names(docking)
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
View(docking.m)
View(docking.m)
docking.m$variable <- factor(docking.m$variable, levels = names(docking))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
names(docking)<- factor(names(docking), levels = c("genome",names(rev(sort(apply(docking[,-1],2,sum))))))
names(docking)
names(rev(sort(apply(docking[,-1],2,sum)))))
names(rev(sort(apply(docking[,-1],2,sum))))
docking.m$variable <- factor(docking.m$variable, levels = names(rev(sort(apply(docking[,-1],2,sum)))))
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable <- factor(docking.m$variable, levels = names(rev(sort(apply(docking[,-1],2,sum)))))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
#library(xlsx) # For save data on excel
color_palette <- colorRampPalette(c("#3794bf", "#FFFFFF", "#df8640"))
hm.palette <- c("#3794bf", "#FFFFFF", "#df8640")
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+
scale_fill_manual(values = (black,white))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+
scale_fill_manual(values = ("black","white"))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))++scale_fill_gradient(low = "white", high = "black",na.value = "orange")
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+scale_fill_gradient(low = "white", high = "black",na.value = "orange")
hclust(docking)
hclust(docking[,])
d <- dist(docking, method = "euclidean")
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
names(fit)
fit$order
names(fit)
fit$label
fit$labels
fit$labels
names(fit)
fit$order
doking(names)(order(fit$order))
names(docking)(order(fit$order))
names(docking)[order(fit$order))]
names(docking)[order(fit$order)]
docking.m$variable <- factor(docking.m$variable, levels = names(docking)[order(fit$order)])
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+scale_fill_gradient(low = "white", high = "black",na.value = "orange")
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable <- factor(docking.m$variable, levels = names(rev(sort(apply(docking[,-1],2,sum)))))
#d <- dist(docking, method = "euclidean")
#fit <- hclust(d, method="ward")
#plot(fit) # display dendogram
#names(docking)[order(fit$order)]
#docking.m$variable <- factor(docking.m$variable, levels = names(docking)[order(fit$order)])
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+scale_fill_gradient(low = "white", high = "black",na.value = "orange")
#scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none",plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=15)
#gcolor$data[[1]]["fill"]
#gcolor$data[[1]]
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable <- factor(docking.m$variable, levels = names(rev(sort(apply(docking[,-1],2,sum)))))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+scale_fill_gradient(low = "white", high = "black",na.value = "orange")
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(dockingS,id = "genome")
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable <- factor(docking.m$variable, levels = names(rev(sort(apply(docking[,-1],2,sum)))))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+scale_fill_gradient(low = "white", high = "black",na.value = "orange")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable <- factor(docking.m$variable, levels = names(rev(sort(apply(docking[,-1],2,sum)))))
docking.m$variable
names(docking)
docking.m <- melt(dockingS,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m$variable <- factor(docking.m$variable, levels = names(rev(sort(apply(docking[,-1],2,sum)))))
docking.m$variable
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+scale_fill_gradient(low = "white", high = "black",na.value = "orange")
load("/media/strain/disco2/Alun/GIT/domains/PLOTS/GraficosDominios.Rmd")
source("/media/strain/disco2/Alun/GIT/domains/PLOTS/GraficosDominios.Rmd")
source(/media/strain/disco2/Alun/GIT/domains/PLOTS/GraficosDominios.Rmd
setwd("/media/strain/disco2/Alun/GIT/domains/PLOTS")
file = "../OUTPUTS/families20firstmission_ordered.csv"
setwd("/media/strain/disco2/Alun/GIT/domains/PLOTS")
library(readr)
library(ggplot2)
library(plyr)
library( reshape )
file = "../OUTPUTS/families20firstmission_ordered.csv"
FIRSTmissionTable <- read_delim(file, "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
head(FIRSTmissionTable)
colnames(FIRSTmissionTable)=c("family","domains_number")
FIRSTmissionTable$Ordenado<-factor(FIRSTmissionTable$family, unique(as.character(FIRSTmissionTable$family)))
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot()+geom_jitter(width=0.3,alpha=0.05)  + xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))
p+theme(plot.margin = unit(c(1,1,1.5,1.2),"cm"))
p+
px<-p+scale_x_discrete(limits=c("PKS I","ABC transporter","NRPS","3-oxoacyl-[acyl-carrier protein] reductase","P450-derived glycosyltranferase activator","Fungal P450","Major facilitator family transporter","UDP-glycosyltransferases and similar proteins","Polyketide synthase","Thioesterase domain","Polyketide synthase","dTDP-glucose 4,6-dehydratases","Fungal S-adenosylmethionine-dependent methyltransferase","SARP family transcriptional regulator","PLP enzyme","UbiE SAM-dependent","Zinc-dependent alcohol dehydrogenase-like","2-polyprenyl-6-methoxyphenol hydroxylase","Acyl-CoA synthetase (AMP-forming)/AMP-acid ligase II","3-oxoacyl-[acyl-carrier-protein] synthase I"))
p+
p+scale_x_discrete(limits=c("PKS I","ABC transporter","NRPS","3-oxoacyl-[acyl-carrier protein] reductase","P450-derived glycosyltranferase activator","Fungal P450","Major facilitator family transporter","UDP-glycosyltransferases and similar proteins","Polyketide synthase","Thioesterase domain","Polyketide synthase","dTDP-glucose 4,6-dehydratases","Fungal S-adenosylmethionine-dependent methyltransferase","SARP family transcriptional regulator","PLP enzyme","UbiE SAM-dependent","Zinc-dependent alcohol dehydrogenase-like","2-polyprenyl-6-methoxyphenol hydroxylase","Acyl-CoA synthetase (AMP-forming)/AMP-acid ligase II","3-oxoacyl-[acyl-carrier-protein] synthase I"))
px=p+scale_x_discrete(limits=c("PKS I","ABC transporter","NRPS","3-oxoacyl-[acyl-carrier protein] reductase","P450-derived glycosyltranferase activator","Fungal P450","Major facilitator family transporter","UDP-glycosyltransferases and similar proteins","Polyketide synthase","Thioesterase domain","Polyketide synthase","dTDP-glucose 4,6-dehydratases","Fungal S-adenosylmethionine-dependent methyltransferase","SARP family transcriptional regulator","PLP enzyme","UbiE SAM-dependent","Zinc-dependent alcohol dehydrogenase-like","2-polyprenyl-6-methoxyphenol hydroxylase","Acyl-CoA synthetase (AMP-forming)/AMP-acid ligase II","3-oxoacyl-[acyl-carrier-protein] synthase I"))
px
p+scale_x_discrete(limits=c("PKS I","ABC transporter","NRPS","3-oxoacyl-[acyl-carrier protein] reductase","P450-derived glycosyltranferase activator","Fungal P450","Major facilitator family transporter","UDP-glycosyltransferases and similar proteins","Polyketide synthase","Thioesterase domain","Polyketide synthase","dTDP-glucose 4,6-dehydratases","Fungal S-adenosylmethionine-dependent methyltransferase","SARP family transcriptional regulator","PLP enzyme","UbiE SAM-dependent","Zinc-dependent alcohol dehydrogenase-like","2-polyprenyl-6-methoxyphenol hydroxylase","Acyl-CoA synthetase (AMP-forming)/AMP-acid ligase II","3-oxoacyl-[acyl-carrier-protein] synthase I"))
ggsave("DomainDistroLONGmem20first.svg",plot = px,width=30,height = 15,units = "cm")
ggsave("DomainDistroLONGmem20first.svg",plot = p,width=30,height = 15,units = "cm")
file = "../OUTPUTS/families40firstmission.csv"
FIRSTmissionTable <- read_delim(file, "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
head(FIRSTmissionTable)
colnames(FIRSTmissionTable)=c("family","domains_number")
FIRSTmissionTable$Ordenado<-factor(FIRSTmissionTable$family, unique(as.character(FIRSTmissionTable$family)))
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot()+geom_jitter(width=0.3,alpha=0.05)  + xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))
ggsave("DomainDistroLONGmem40first.svg",plot = p,width=30,height = 15,units = "cm")
file = "../OUTPUTS/families20firstmission_ordered.csv"
FIRSTmissionTable <- read_delim(file, "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
colnames(FIRSTmissionTable)=c("family","domains_number")
FIRSTmissionTable$Ordenado<-factor(FIRSTmissionTable$family, unique(as.character(FIRSTmissionTable$family)))
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot()+geom_jitter(width=0.3,alpha=0.05)  + xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))
p
file = "../OUTPUTS/families20firstmission_ordered2.csv"
FIRSTmissionTable <- read_delim(file, "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
colnames(FIRSTmissionTable)=c("family","domains_number")
FIRSTmissionTable$Ordenado<-factor(FIRSTmissionTable$family, unique(as.character(FIRSTmissionTable$family)))
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot()+geom_jitter(width=0.3,alpha=0.05)  + xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))
p
ggsave("DomainDistroLONGmem20first.svg",plot = p,width=30,height = 15,units = "cm")
install.packages("drc")
install.packages("mvtnorm")
install.packages('drc', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('multcomp', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('drc', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('multcomp', dependencies=TRUE, repos='http://cran.rstudio.com/')
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.1)  + xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.07)  + xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))
p
p+theme(plot.margin = unit(c(1,1,1.5,1.2),"cm"))+theme_classic()
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.07)+xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))+theme_classic()
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.05)+xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))+theme_classic()
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.02)+xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))+theme_classic()
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.07)+xlab("Ordenado")+theme(axis.text.x = element_text(size = 5))
p
p+theme_classic()
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.07)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))
p
p+theme_classic()
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.03)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))
p+theme_classic()
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.02)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))
p
p+theme_classic()
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.025)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))
p
p+theme_classic()
p
p+theme_classic(axis.text.x=element_text(size = 5))
p+theme(panel.grid.major = element_blank())
p+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
p+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none")
p+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white"))
p+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.03)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))
p+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.3,alpha=0.03)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
ggsave("DomainDistroLONGmem20first.svg",plot = p,width=30,height = 15,units = "cm")
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.2,alpha=0.03)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.25,alpha=0.03)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.26,alpha=0.03)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.26,alpha=0.028)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.26,alpha=0.028)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p
ggsave("DomainDistro1-20first.pdf",plot = p,width=30,height = 15,units = "cm")
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.28,alpha=0.028)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
ggsave("DomainDistro1-20first.pdf",plot = p,width=30,height = 15,units = "cm")
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.28,alpha=0.028)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
ggsave("DomainDistro1-20first.svg",plot = p,width=30,height = 15,units = "cm")
setwd("/media/strain/disco2/Alun/GIT/domains/PLOTS")
file = "../OUTPUTS/families40firstmission.csv"
FIRSTmissionTable <- read_delim(file, "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
colnames(FIRSTmissionTable)=c("family","domains_number")
FIRSTmissionTable$Ordenado<-factor(FIRSTmissionTable$family, unique(as.character(FIRSTmissionTable$family)))
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.28,alpha=0.028)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 5))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
ggsave("DomainDistro21-40second.svg",plot = p,width=30,height = 15,units = "cm")
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.28,alpha=0.028)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 7))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.28,alpha=0.028)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 6))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
p
ggsave("DomainDistro21-40second.svg",plot = p,width=30,height = 15,units = "cm")
file = "../OUTPUTS/families20firstmission_ordered2.csv"
FIRSTmissionTable <- read_delim(file, "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
colnames(FIRSTmissionTable)=c("family","domains_number")
FIRSTmissionTable$Ordenado<-factor(FIRSTmissionTable$family, unique(as.character(FIRSTmissionTable$family)))
p<-ggplot(FIRSTmissionTable,aes(x=Ordenado,y=domains_number,fill=family))+geom_boxplot(outlier.shape = NA)+geom_jitter(width=0.28,alpha=0.028)+xlab("Gene families")+ylab("Number of domains")+theme(axis.text.x = element_text(size = 6))+theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank(),legend.position = "none",panel.background = element_rect(fill = "white",colour = "grey50"))
ggsave("DomainDistro1-20first.svg",plot = p,width=30,height = 15,units = "cm")
View(FIRSTmissionTable)
View(FIRSTmissionTable)
View(FIRSTmissionTable)
View(FIRSTmissionTable)
install.packages("kableExtra")
install.packages("drc")
