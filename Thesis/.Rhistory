AA_mean
Fluor_mean
UFR.lm = lm( Fluor_mean ~ AA_mean)
coeffs = coefficients(UFR.lm); coeffs
b=coeffs[1]
m=coeffs[2]
UAR_interpol = function(x){x*m+b}
## since all AA is converted to PRA we set x axis as PRA uM
plot(AA_mean, Fluor_mean,ylab="URF",xlab="PRA uM", pch=19)
par(new=TRUE)
plot(UAR_interpol,yaxt="n",xaxt="n",xlab="",ylab="", 1,200)
UFR.lm = lm( Fluor_mean ~ AA_mean)
coeffs = coefficients(UFR.lm); coeffs
b=coeffs[1]
m=coeffs[2]
UAR_interpol = function(x){x*m+b}
## since all AA is converted to PRA we set x axis as PRA uM
plot(AA_mean, Fluor_mean,ylab="URF",xlab="PRA uM", pch=19)
par(new=TRUE)
plot(UAR_interpol,yaxt="n",xaxt="n",xlab="",ylab="", 1,200)
AAcon = function(y){(y-b)/m}
AAcon(30000)
PRAassay2<- AAcon(tablePRA)
PRAassay2["Time"]<- tablePRA["Time"]
PRAassay2$Cycle <- NULL
PRAassay2$Temp <- NULL
PRAassay2.m <- melt(PRAassay2,id="Time")
plot(PRAassay2.m$Time, PRAassay2.m$value, col=PRAassay2.m$variable, xlab="Time", ylab="URF PRA uM",pch=19)
par(new=TRUE)
legend("right", legend = unique(PRAassay2.m$variable), col = unique(PRAassay2.m$variable), pch=19,box.lwd=0, bg="white")
##pendientes (slopes) of linear part of the curve
# time when TrpF is added
cuttime<-49.5
maxtime=300
PRAassay2Time<-PRAassay2[which(PRAassay2$Time >= cuttime & PRAassay2$Time <= maxtime),]
# vector with slopes for each dataset
V0 <- apply(PRAassay2Time, 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time))[2])
## Hacer un plot para comprobar
#x1<-PRAassay2Time$Time
#y1<-PRAassay2Time$Scoe10
#test.lm<-lm(  x1 ~ y1)
#coeffs = coefficients(test.lm);
#test.b=coeffs[1]
#test.m=coeffs[2]
#test_interpol = function(x){x*test.m+test.b}
#plot(x1, y1, ylab="UAR",xlab="Time", pch=19)
#par(new=TRUE)
#text<-c("slope",test.m)
#plot(test_interpol, yaxt="n",xaxt="n",xlab="",ylab="", 1,800)
#legend("topright", legend = text,  pch=19)
## ploting PRA degradation part with slope and slope labels
PRAassay2Time.m <- melt(PRAassay2Time,id="Time")
plot(PRAassay2Time.m$Time, PRAassay2Time.m$value, col=PRAassay2Time.m$variable, pch=19, xlim=c(cuttime-50,maxtime+50),bty='L')
V1 <- apply(PRAassay2Time[,2:ncol(PRAassay2Time)], 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time)))
apply(V1, 2, function(x) {abline(x, col = PRAassay2Time.m$variable)  })
par(xpd = TRUE)
slopeText2="m ="
slopeText<-paste(slopeText2,rev(round(V0[-1],digits=6)),rev(names(V0[-1])))
legend(800,200, legend = slopeText, col = rev(unique(PRAassay2Time.m$variable)), pch=19,box.lwd=0, bg="white")
slopes=(round(V0[-1],digits=6))[c(TRUE)]
concentration<-as.matrix(PRAassay2Time[1,names(slopes)])
#slopes
#concentration
slopes=as.matrix((round(V0[-1],digits=6))[c(TRUE)])
row.names(slopes) <- NULL
slopes<-c(slopes)
slopes
row.names(concentration) <- NULL
concentration<-c(concentration)
slopes
concentration
S <-rep(c(1.25,	2.5,	3.75,	6.25,	10,	20,	37.5,	62.5),3)
v <-slopes
v<--1*v
S
v
mm <- data.frame(S,v)
model.drm <- drm(v ~ S, data = mm, fct = MM.2())
summary(model.drm)
## first value equal km
## second value = vm
Km=coefficients(model.drm)[1]
Vmax=2*coefficients(model.drm)[2]
Enzyme=2.5 #2.5uM
Kcat=Vmax*Enzyme
Km
Vmax
Kcat
mml <- data.frame(S = seq(0, max(mm$S), length.out = 100))
mml$v <- predict(model.drm, newdata = mml)
## plot on r base
plot(mm,log='',xlim=c(-0.1,20), ylim=c(-0.01,.07), xlab="Reads", ylab="Transcripts")
ggplot(mm, aes(x = S, y = v)) + theme_bw() + xlab("Concentration [uM]") + ylab("Speed [d[PRA]uM/s]") + ggtitle("Michaelis-Menten kinetics") +  geom_point(alpha = 0.5) + geom_line(data = mml, aes(x = S, y = v), colour = "red")
plot(mm,log='',xlim=c(-0,60), ylim=c(0,60), xlab="Reads", ylab="Transcripts")
ggplot(mm, aes(x = S, y = v)) + theme_bw() + xlab("Concentration [uM]") + ylab("Speed [d[PRA]uM/s]") + ggtitle("Michaelis-Menten kinetics") +  geom_point(alpha = 0.5) + geom_line(data = mml, aes(x = S, y = v), colour = "red")
cuttime<-49.5
maxtime=300
PRAassay2Time<-PRAassay2[which(PRAassay2$Time >= cuttime & PRAassay2$Time <= maxtime),]
# vector with slopes for each dataset
V0 <- apply(PRAassay2Time, 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time))[2])
## Hacer un plot para comprobar
#x1<-PRAassay2Time$Time
#y1<-PRAassay2Time$Scoe10
#test.lm<-lm(  x1 ~ y1)
#coeffs = coefficients(test.lm);
#test.b=coeffs[1]
#test.m=coeffs[2]
#test_interpol = function(x){x*test.m+test.b}
#plot(x1, y1, ylab="UAR",xlab="Time", pch=19)
#par(new=TRUE)
#text<-c("slope",test.m)
#plot(test_interpol, yaxt="n",xaxt="n",xlab="",ylab="", 1,800)
#legend("topright", legend = text,  pch=19)
## ploting PRA degradation part with slope and slope labels
PRAassay2Time.m <- melt(PRAassay2Time,id="Time")
plot(PRAassay2Time.m$Time, PRAassay2Time.m$value, col=PRAassay2Time.m$variable, pch=19, xlim=c(cuttime-50,maxtime+50),bty='L')
tablePRA <- read.table("cineticas/PRA_TrpF_Jden_20150423.data",header=TRUE, sep="\t")
tablePRA <- read.table("chapter2/cineticas/PRA_TrpF_Jden_20150423.data",header=TRUE, sep="\t")
## visualising full data
tablePRA$Temp<-NULL
tablePRA$Cycle<-NULL
PRAassay.m <- melt(tablePRA,id="Time")
plot(PRAassay.m$Time, PRAassay.m$value, col=PRAassay.m$variable, xlab="Time [s]",ylab="Fluorescence", pch=19)
par(new=TRUE)
legend("right", legend = rev(unique(PRAassay.m$variable)), col = rev(unique(PRAassay.m$variable)),pch=19,bg="white")
## getting Units of relative fluorescence before adding PriA
AA_Con<-rep(c(1.25,	2.5,	3.75,	6.25,	10,	20,	37.5,	62.5),3)
## at time 196.2, when all AA is converted fluorescence data where
Fluor<-c(0.3603103582,16.57656773,	24.8040479769,	33.0302900927,	62.7172421841,	75.5304893321,	116.8260724776,102.9074874195,3.6271404012,	2.2514345242,	16.7047071749,	42.3110498213,	58.3542961723,	105.7449137008	,141.0720079924,	134.5096147278,4.3589042967,	17.6008720996,	21.843520163,	52.5170349751,	71.583299178,	113.2694343876	,176.6405805269	,183.8715503108)
## the true false if because we have use 2 columns on plate with same concentration on row, if more columns are to be used this must be adpated
meanVector <- function(argument1,n){
m=n-1
resul=rep(0,8)
for (i in 0:m) {
for (j in 1:8) {
#print(c(i,j))
resul[j]=resul[j]+argument1[i*8+j]/n
}
}
return(resul)
}
AA_mean<-meanVector(AA_Con,3)
Fluor_mean<-meanVector(Fluor,3)
Fluor_mean<-meanVector(Fluor,3)
UFR.lm = lm( Fluor_mean ~ AA_mean)
coeffs = coefficients(UFR.lm); coeffs
b=coeffs[1]
m=coeffs[2]
UAR_interpol = function(x){x*m+b}
## since all AA is converted to PRA we set x axis as PRA uM
plot(AA_mean, Fluor_mean,ylab="URF",xlab="PRA uM", pch=19)
par(new=TRUE)
plot(UAR_interpol,yaxt="n",xaxt="n",xlab="",ylab="", 1,200)
plot(UAR_interpol,yaxt="n",xaxt="n",xlab="",ylab="", 1,200)
AAcon = function(y){(y-b)/m}
AAcon(30000)
PRAassay2<- AAcon(tablePRA)
PRAassay2["Time"]<- tablePRA["Time"]
PRAassay2$Cycle <- NULL
PRAassay2$Temp <- NULL
PRAassay2.m <- melt(PRAassay2,id="Time")
plot(PRAassay2.m$Time, PRAassay2.m$value, col=PRAassay2.m$variable, xlab="Time", ylab="URF PRA uM",pch=19)
par(new=TRUE)
legend("right", legend = unique(PRAassay2.m$variable), col = unique(PRAassay2.m$variable), pch=19,box.lwd=0, bg="white")
##pendientes (slopes) of linear part of the curve
# time when TrpF is added
cuttime<-49.5
maxtime=300
PRAassay2Time<-PRAassay2[which(PRAassay2$Time >= cuttime & PRAassay2$Time <= maxtime),]
# vector with slopes for each dataset
V0 <- apply(PRAassay2Time, 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time))[2])
## Hacer un plot para comprobar
#x1<-PRAassay2Time$Time
#y1<-PRAassay2Time$Scoe10
#test.lm<-lm(  x1 ~ y1)
#coeffs = coefficients(test.lm);
#test.b=coeffs[1]
#test.m=coeffs[2]
#test_interpol = function(x){x*test.m+test.b}
#plot(x1, y1, ylab="UAR",xlab="Time", pch=19)
#par(new=TRUE)
#text<-c("slope",test.m)
#plot(test_interpol, yaxt="n",xaxt="n",xlab="",ylab="", 1,800)
#legend("topright", legend = text,  pch=19)
## ploting PRA degradation part with slope and slope labels
PRAassay2Time.m <- melt(PRAassay2Time,id="Time")
plot(PRAassay2Time.m$Time, PRAassay2Time.m$value, col=PRAassay2Time.m$variable, pch=19, xlim=c(cuttime-50,maxtime+50),bty='L')
V1 <- apply(PRAassay2Time[,2:ncol(PRAassay2Time)], 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time)))
apply(V1, 2, function(x) {abline(x, col = PRAassay2Time.m$variable)  })
par(xpd = TRUE)
slopeText2="m ="
slopeText<-paste(slopeText2,rev(round(V0[-1],digits=6)),rev(names(V0[-1])))
legend(800,200, legend = slopeText, col = rev(unique(PRAassay2Time.m$variable)), pch=19,box.lwd=0, bg="white")
## get relevant velocities and get correspondent concentrations
## V0 or slopes are on [PRA]uM/s
# slopes stores the slope, with TRUE , FALSE the desired enzyme can be selected, One more than one is tested on a plate always check if it is the desired one.
slopes=(round(V0[-1],digits=6))[c(TRUE)]
concentration<-as.matrix(PRAassay2Time[1,names(slopes)])
#slopes
#concentration
slopes=as.matrix((round(V0[-1],digits=6))[c(TRUE)])
row.names(slopes) <- NULL
slopes<-c(slopes)## plot on r base
plot(mm,log='',xlim=c(-0.1,20), ylim=c(-0.01,.07), xlab="Reads", ylab="Transcripts")
slopes
# in concentration I stored the inital substrate concentration
row.names(concentration) <- NULL
concentration<-c(concentration)
slopes
concentration
PRAassay2Time.m <- melt(PRAassay2Time,id="Time")
plot(PRAassay2Time.m$Time, PRAassay2Time.m$value, col=PRAassay2Time.m$variable, pch=19, xlim=c(cuttime-50,maxtime+50),bty='L')
V1 <- apply(PRAassay2Time[,2:ncol(PRAassay2Time)], 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time)))
apply(V1, 2, function(x) {abline(x, col = PRAassay2Time.m$variable)  })
par(xpd = TRUE)
slopeText2="m ="
slopeText<-paste(slopeText2,rev(round(V0[-1],digits=6)),rev(names(V0[-1])))
legend(800,200, legend = slopeText, col = rev(unique(PRAassay2Time.m$variable)), pch=19,box.lwd=0, bg="white")
cuttime<-60
maxtime=300
PRAassay2Time<-PRAassay2[which(PRAassay2$Time >= cuttime & PRAassay2$Time <= maxtime),]
# vector with slopes for each dataset
V0 <- apply(PRAassay2Time, 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time))[2])
## Hacer un plot para comprobar
#x1<-PRAassay2Time$Time
#y1<-PRAassay2Time$Scoe10
#test.lm<-lm(  x1 ~ y1)
#coeffs = coefficients(test.lm);
#test.b=coeffs[1]
#test.m=coeffs[2]
#test_interpol = function(x){x*test.m+test.b}
#plot(x1, y1, ylab="UAR",xlab="Time", pch=19)
#par(new=TRUE)
#text<-c("slope",test.m)
#plot(test_interpol, yaxt="n",xaxt="n",xlab="",ylab="", 1,800)
#legend("topright", legend = text,  pch=19)
## ploting PRA degradation part with slope and slope labels
PRAassay2Time.m <- melt(PRAassay2Time,id="Time")
plot(PRAassay2Time.m$Time, PRAassay2Time.m$value, col=PRAassay2Time.m$variable, pch=19, xlim=c(cuttime-50,maxtime+50),bty='L')
V1 <- apply(PRAassay2Time[,2:ncol(PRAassay2Time)], 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time)))
apply(V1, 2, function(x) {abline(x, col = PRAassay2Time.m$variable)  })
par(xpd = TRUE)
slopeText2="m ="
slopeText<-paste(slopeText2,rev(round(V0[-1],digits=6)),rev(names(V0[-1])))
tablePRA <- read.table("cineticas/PRA_TrpF_Jden_20150423.data",header=TRUE, sep="\t")
tablePRA <- read.table("chapter2/cineticas/PRA_TrpF_Jden_20150423.data",header=TRUE, sep="\t")
## visualising full data
tablePRA$Temp<-NULL
tablePRA$Cycle<-NULL
PRAassay.m <- melt(tablePRA,id="Time")
plot(PRAassay.m$Time, PRAassay.m$value, col=PRAassay.m$variable, xlab="Time [s]",ylab="Fluorescence", pch=19)
par(new=TRUE)
legend("right", legend = rev(unique(PRAassay.m$variable)), col = rev(unique(PRAassay.m$variable)),pch=19,bg="white")
AA_Con<-rep(c(1.25,	2.5,	3.75,	6.25,	10,	20,	37.5,	62.5),3)
## at time 196.2, when all AA is converted fluorescence data where
Fluor<-c(0.3603103582,16.57656773,	24.8040479769,	33.0302900927,	62.7172421841,	75.5304893321,	116.8260724776,102.9074874195,3.6271404012,	2.2514345242,	16.7047071749,	42.3110498213,	58.3542961723,	105.7449137008	,141.0720079924,	134.5096147278,4.3589042967,	17.6008720996,	21.843520163,	52.5170349751,	71.583299178,	113.2694343876	,176.6405805269	,183.8715503108)
## the true false if because we have use 2 columns on plate with same concentration on row, if more columns are to be used this must be adpated
meanVector <- function(argument1,n){
m=n-1
resul=rep(0,8)
for (i in 0:m) {
for (j in 1:8) {
#print(c(i,j))
resul[j]=resul[j]+argument1[i*8+j]/n
}
}
return(resul)
}
AA_mean<-meanVector(AA_Con,3)
Fluor_mean<-meanVector(Fluor,3)
UFR.lm = lm( Fluor_mean ~ AA_mean)
coeffs = coefficients(UFR.lm); coeffs
b=coeffs[1]
m=coeffs[2]
UAR_interpol = function(x){x*m+b}
## since all AA is converted to PRA we set x axis as PRA uM
plot(AA_mean, Fluor_mean,ylab="URF",xlab="PRA uM", pch=19)
S <-rep(c(1.25,	2.5,	3.75,	6.25,	10,	20,	37.5,	62.5),3)
v<-c(0.3603103582,16.57656773,	24.8040479769,	33.0302900927,	62.7172421841,	75.5304893321,	116.8260724776,102.9074874195,3.6271404012,	2.2514345242,	16.7047071749,	42.3110498213,	58.3542961723,	105.7449137008	,141.0720079924,	134.5096147278,4.3589042967,	17.6008720996,	21.843520163,	52.5170349751,	71.583299178,	113.2694343876	,176.6405805269	,183.8715503108)
mm <- data.frame(S,v)
model.drm <- drm(v ~ S, data = mm, fct = MM.2())
summary(model.drm)
## first value equal km
## second value = vm
Km=coefficients(model.drm)[1]
Vmax=2*coefficients(model.drm)[2]
Enzyme=2.5 #2.5uM
Kcat=Vmax*Enzyme
Km
Vmax
Kcat
mml <- data.frame(S = seq(0, max(mm$S), length.out = 100))
mml$v <- predict(model.drm, newdata = mml)
## plot on r base
plot(mm,log='',xlim=c(0,60), ylim=c(0,60), xlab="Reads", ylab="Transcripts")
ggplot(mm, aes(x = S, y = v)) + theme_bw() + xlab("Concentration [uM]") + ylab("Speed [d[PRA]uM/s]") + ggtitle("Michaelis-Menten kinetics") +  geom_point(alpha = 0.5) + geom_line(data = mml, aes(x = S, y = v), colour = "red")
AA_Con<-rep(c(1.25,	2.5,	3.75,	6.25,	10,	20,	37.5,	62.5),3)
## at time 196.2, when all AA is converted fluorescence data where
Fluor<-c(5773,7005,7512,9468,11966,17115,29515,41468,5779,6635,7437,9073,11777,16850,27559,41135,5499,6740,7497,8996,10980,17626,27017,41486)
## the true false if because we have use 2 columns on plate with same concentration on row, if more columns are to be used this must be adpated
meanVector <- function(argument1,n){
m=n-1
resul=rep(0,8)
for (i in 0:m) {
for (j in 1:8) {
#print(c(i,j))
resul[j]=resul[j]+argument1[i*8+j]/n
}
}
return(resul)
}
AA_mean<-meanVector(AA_Con,3)
Fluor_mean<-meanVector(Fluor,3)
UFR.lm = lm( Fluor_mean ~ AA_mean)
coeffs = coefficients(UFR.lm); coeffs
b=coeffs[1]
m=coeffs[2]
UAR_interpol = function(x){x*m+b}
## since all AA is converted to PRA we set x axis as PRA uM
plot(AA_mean, Fluor_mean,ylab="URF",xlab="PRA uM", pch=19)
par(new=TRUE)
plot(UAR_interpol,yaxt="n",xaxt="n",xlab="",ylab="", 1,200)
plot(AA_mean, Fluor_mean,ylab="URF",xlab="PRA uM", pch=19)
plot(UAR_interpol,yaxt="n",xaxt="n",xlab="",ylab="", 1,200)
plot(AA_mean, Fluor_mean,ylab="URF",xlab="PRA uM", pch=19)
par(new=TRUE)
plot(UAR_interpol,yaxt="n",xaxt="n",xlab="",ylab="", 1,200)
AAcon = function(y){(y-b)/m}
AAcon(30000)
PRAassay2<- AAcon(tablePRA)
PRAassay2["Time"]<- tablePRA["Time"]
PRAassay2$Cycle <- NULL
PRAassay2$Temp <- NULL
PRAassay2.m <- melt(PRAassay2,id="Time")
plot(PRAassay2.m$Time, PRAassay2.m$value, col=PRAassay2.m$variable, xlab="Time", ylab="URF PRA uM",pch=19)
par(new=TRUE)
legend("right", legend = unique(PRAassay2.m$variable), col = unique(PRAassay2.m$variable), pch=19,box.lwd=0, bg="white")
cuttime<-60
maxtime=200
PRAassay2Time<-PRAassay2[which(PRAassay2$Time >= cuttime & PRAassay2$Time <= maxtime),]
# vector with slopes for each dataset
V0 <- apply(PRAassay2Time, 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time))[2])
## Hacer un plot para comprobar
#x1<-PRAassay2Time$Time
#y1<-PRAassay2Time$Scoe10
#test.lm<-lm(  x1 ~ y1)
#coeffs = coefficients(test.lm);
#test.b=coeffs[1]
#test.m=coeffs[2]
#test_interpol = function(x){x*test.m+test.b}
#plot(x1, y1, ylab="UAR",xlab="Time", pch=19)
#par(new=TRUE)
#text<-c("slope",test.m)
#plot(test_interpol, yaxt="n",xaxt="n",xlab="",ylab="", 1,800)
#legend("topright", legend = text,  pch=19)
## ploting PRA degradation part with slope and slope labels
PRAassay2Time.m <- melt(PRAassay2Time,id="Time")
plot(PRAassay2Time.m$Time, PRAassay2Time.m$value, col=PRAassay2Time.m$variable, pch=19, xlim=c(cuttime-50,maxtime+50),bty='L')
V1 <- apply(PRAassay2Time[,2:ncol(PRAassay2Time)], 2, function(x) coefficients(lm(x ~ PRAassay2Time$Time)))
apply(V1, 2, function(x) {abline(x, col = PRAassay2Time.m$variable)  })
par(xpd = TRUE)
slopeText2="m ="
slopeText<-paste(slopeText2,rev(round(V0[-1],digits=6)),rev(names(V0[-1])))
legend(800,200, legend = slopeText, col = rev(unique(PRAassay2Time.m$variable)), pch=19,box.lwd=0, bg="white")
## get relevant velocities and get correspondent concentrations
## V0 or slopes are on [PRA]uM/s
# slopes stores the slope, with TRUE , FALSE the desired enzyme can be selected, One more than one is tested on a plate always check if it is the desired one.
slopes=(round(V0[-1],digits=6))[c(TRUE)]
concentration<-as.matrix(PRAassay2Time[1,names(slopes)])
#slopes
#concentration
slopes=as.matrix((round(V0[-1],digits=6))[c(TRUE)])
row.names(slopes) <- NULL
slopes<-c(slopes)## plot on r base
slopes
# in concentration I stored the inital substrate concentration
row.names(concentration) <- NULL
concentration<-c(concentration)
slopes
concentration
S <-rep(c(1.25,	2.5,	3.75,	6.25,	10,	20,	37.5,	62.5),3)
v <-slopes
#S<-S[c(TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE)]
#v<-v[c(TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE)]
v<--1*v
mm <- data.frame(S,v)
model.drm <- drm(v ~ S, data = mm, fct = MM.2())
summary(model.drm)
## first value equal km
## second value = vm
Km=coefficients(model.drm)[1]
Vmax=2*coefficients(model.drm)[2]
Enzyme=2.5 #2.5uM
Kcat=Vmax*Enzyme
Km
Vmax
Kcat
mml <- data.frame(S = seq(0, max(mm$S), length.out = 100))
mml$v <- predict(model.drm, newdata = mml)
## plot on r base
plot(mm,log='',xlim=c(0,60), ylim=c(0,60), xlab="Reads", ylab="Transcripts")
##plot on ggplot
e
ggplot(mm, aes(x = S, y = v)) + theme_bw() + xlab("Concentration [uM]") + ylab("Speed [d[PRA]uM/s]") + ggtitle("Michaelis-Menten kinetics") +  geom_point(alpha = 0.5) + geom_line(data = mml, aes(x = S, y = v), colour = "red")
TrpC<-rep(2.6,8)
TrpC
TrpD<-rep(4,8)
TrpC_stock=60 ##uM
TrpD_stock=40 ##uM
TrpF_stock=2 ##uM
AA_Stock=33 ##uM
```
_Substrate_
-TrpF
> TrpC `r TrpC_stock` $\mu M$  Stock
> TrpD `r TrpD_stock` $ \mu M$  Stock
AA=68.57/(137.14*.015)
AA
AAdata["Vol"] <-round(hole_vol*AAdata["AA_microMolar"]/(stock_con*10**(-1*AAdata["AA_Dilution"])),digits = 2) # That creates the new column named "MY_NEW_COLUMN"
TrpC<-rep(2.6,8)
TrpD<-rep(4,8)  ##
AA_microMolar<-rev(c(1.25, 2.5,3.75,6.25,10, 20, 37.5,62.5))
AAdata <- read.table(header=TRUE, text='
AA_Dilution
1
2
2
2
2
3
3
3
')
AAdata["AA_microMolar"]<-AA_microMolar
#stock_con=33uM
stock_con<-AA_Stock*1000
#Calculating volumes accordi
AAdata["Vol"] <-round(hole_vol*AAdata["AA_microMolar"]/(stock_con*10**(-1*AAdata["AA_Dilution"])),digits = 2) # That creates the new column named "MY_NEW_COLUMN"
TrpC_stock=60 ##uM
TrpD_stock=40 ##uM
TrpF_stock=91.5 ##uM
AA_Stock=33 ##mM
hole_vol=160 ##ul
TrpF_final=2.5 ##uM final concentration on hole
TrpF_vol=hole_vol*TrpF_final/TrpF_stock
TrpC<-rep(2.6,8)
TrpD<-rep(4,8)  ##
AA_microMolar<-rev(c(1.25, 2.5,3.75,6.25,10, 20, 37.5,62.5))
AAdata <- read.table(header=TRUE, text='
AA_Dilution
1
2
2
2
2
3
3
3
')
AAdata["AA_microMolar"]<-AA_microMolar
#stock_con=33uM
stock_con<-AA_Stock*1000
stock_con
tablePRA <- read.table("chapter2/cineticas/TrpFScoeyD11A_090517.data",header=TRUE, sep="\t")
tablePRA <- read.table("chapter2/cineticas/TrpFScoeyD11A_090517.data",header=TRUE, sep="\t")
## visualising full data
tablePRA$Temp<-NULL
tablePRA$Cycle<-NULL
PRAassay.m <- melt(tablePRA,id="Time")
plot(PRAassay.m$Time, PRAassay.m$value, col=PRAassay.m$variable, xlab="Time [s]",ylab="Fluorescence", pch=19)
par(new=TRUE)
legend("right", legend = rev(unique(PRAassay.m$variable)), col = rev(unique(PRAassay.m$variable)),pch=19,bg="white")
View(tablePRA)
View(tablePRA)
View(tablePRA)
PRAassay.m <- melt(tablePRA,id="Time")
plot(PRAassay.m$Time, PRAassay.m$value, col=PRAassay.m$variable, xlab="Time [s]",ylab="Fluorescence", pch=19)
par(new=TRUE)
legend("right", legend = rev(unique(PRAassay.m$variable)), col = rev(unique(PRAassay.m$variable)),pch=19,bg="white")
tablePRA <- read.table("chapter2/cineticas/TrpFScoeyD11A_090517.data",header=TRUE, sep="\t")
## visualising full data
tablePRA$Temp<-NULL
tablePRA$Cycle<-NULL
PRAassay.m <- melt(tablePRA,id="Time")
plot(PRAassay.m$Time, PRAassay.m$value, col=PRAassay.m$variable, xlab="Time [s]",ylab="Fluorescence", pch=19)
par(new=TRUE)
legend("right", legend = rev(unique(PRAassay.m$variable)), col = rev(unique(PRAassay.m$variable)),pch=19,bg="white")
tablePRA <- read.table("chapter2/cineticas/TrpFScoeyD11A_090517.data",header=TRUE, sep="\t",na.rm)
setwd("~/GIT/phd/Thesis/tesis/chapter2")
tablePRA <- read.table("chapter2/cineticas/Pra_scoe1.data",header=TRUE, sep="\t")
tablePRA <- read.table("cineticas/Pra_scoe1.data",header=TRUE, sep="\t")
setwd("~/GIT/phd/Thesis/tesis/chapter2")
tablePRA <- read.table("cineticas/Pra_scoe1.data",header=TRUE, sep="\t")
## visualising full data
tablePRA$Temp<-NULL
tablePRA$Cycle<-NULL
PRAassay.m <- melt(tablePRA,id="Time")
plot(PRAassay.m$Time, PRAassay.m$value, col=PRAassay.m$variable, na.value = "orange", xlab="Time [s]",ylab="Fluorescence", pch=19)
par(new=TRUE)
legend("right", legend = rev(unique(PRAassay.m$variable)), col = rev(unique(PRAassay.m$variable)),pch=19,bg="white")
```
```{r FluorescenceRelativeUnits}
AA_Con<-rev(rep(c(1.25,	2.5,	3.75,	6.25,	10,	20,	37.5),3))
## at time 196.2, when all AA is converted fluorescence data where
Fluor<-c(22814,22313,22904,12550,12776,12846,8374,7935,7802,6898,6053,6127,7738,2385,4990,4671,4282,4285,3491,3427,3462)
## the true false if because we have use 2 columns on plate with same concentration on row, if more columns are to be used this must be adpated
meanVector <- function(argument1,n){
m=n-1
resul=rep(0,8)
for (i in 0:m) {
Add `r PriA_Stock2*PlateColum*(6)/PriA_stock` $\mu l$ of PriA from stock to a `r Platecolum*(6)-PriA_final*Platecolum*(6)/Pria_stock` $\mu l$ of Buffer to obtain PriA at `PriA_final` $\mu M$.
tablePRA <- read.table("cineticas/TdGTP20150819_2.data",header=TRUE, sep="\t")
