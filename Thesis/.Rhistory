tableCentral$ExpNum=1-tableCentral$OneCopy/tableCentral$CopiesEvo
tableExp<-tableExp[order(tableExp$Order),]
#tableCentral$Order=tableCentral$Order+193
tableCentral$Order
tableCentral<-tableCentral[order(tableCentral$Order),]
tableEnzymeReduced=subset(tableExp,tableExp$ExpNum<=.6 & tableExp$ExpNum>= .2 )
tableExp[215,"Org"]<-"AroA"
LivitableDistribution$Enzyme_215
tableCentral$Org<-"Actinobacteria"
tableCentral[69,"Org"]<-"AroA"
tableCentral[69,"Function"]
total <- rbind(tableExp,tableCentral)
todosImage<-ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda))+facet_wrap(~ total$Type)+ geom_point(shape=20) + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$Org, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
#str(CoelicolortableExp)
#CoelicolortableExp$Enzyme
## ploting images
#############################################################################################################################################
require("svglite")
imageCentral= ggplot(tableCentral,aes(x=tableCentral$Order, y=tableCentral$ExpNum, color=tableCentral$BGC, size = tableCentral$Moda))+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
ggplot(tableCentral,aes(x=tableCentral$Order, y=tableCentral$ExpNum, color=tableCentral$BGC, size = tableCentral$Moda))+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
ggsave(file="imageCentral.svg", plot=imageCentral, width=20, height=8)
### Aqui aquellas que no tenian tantos reclutamientos/expansions
figura1<-ggplot(tableEnzymeReduced,aes(x=tableEnzymeReduced$Order, y=tableEnzymeReduced$ExpNum, color=tableEnzymeReduced$BGC, size = tableEnzymeReduced$Moda))+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
StreptoNp <- read.table("Figuras/naturalProductsEnzymeReduced.data", header=TRUE, sep="\t")
figura2<-qplot(x=Central, data=StreptoNp, geom="bar", fill=kingdom, position="stack")+theme_bw()+ theme(legend.position	="bottom",text = element_text(size=8), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5) ,axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5) )
figura3<-qplot(x=Central, data=StreptoNp, geom="bar", fill=taxa, position="stack")+theme_bw()+ theme(legend.position	="bottom",text = element_text(size=8), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5) ,axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5) )
#mm<-count(StreptoNp$Central)
#small<-mm[which(mm$freq<50),]
#str(mm)
#StreptoNpSmall=StreptoNp[StreptoNp$Central %in% small$x,]
#StreptoNp$Central %in% small$x
#qplot(x=Central, data=StreptoNpSmall, geom="bar", fill=kingdom, position="stack")+theme_bw()+ theme(legend.position	="bottom",text = element_text(size=8), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5) ,axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5) )
#qplot(x=Central, data=StreptoNpSmall, geom="bar", fill=taxa, position="stack")+theme_bw()+ theme(legend.position	="bottom",text = element_text(size=8), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5) ,axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5) )
#kable(CoelicolortableExp,  caption = "CoelicolorExpansions\\label{tab:Coelicolor Expansions}",caption.short = "CoelicolorExpansions")
# Expansions of enzyme sequences from MiBIG from S coelicolor will be explored within the scope of the genomic database Streptomyces. The goal is to recover those enzymes that are not yet been considered as common on secondary metabolism.
## Moda is the most common copy number on an organism, Organisms with an extra copy are the ones that may have this copy recrutied into secondary metabolism
# This extra copy on at least 4 organismos
## In addtiion the distribution of the enzyme is desired to be present on at least half o the organisms (Not to exclusive)
## Too exclusive means only belong to secondary metabolism, we are looking for switches
## looking for an esay number between 0 and one that reflects too expanded, too exclusive
#  y el exp number,  mas entre .2<= Exp <=.6 y analizar eso Ã¡rboles.
# One minus average organisms that contains one copy.
# More copies than organisms this number tends to one   ## too expanded
# few copies  on homogeneously on few organisms tends to cero ## too particular
# two copies by organism .5  , that is not usually the case  because there is some variance
######### Functions
OneOrMode <- function(x){ #max between 0 and one
a = table(x) # x is a vector
moda=a[which.max(a)]
inte=max(1,as.integer(names(moda)))
return(inte)
}
Mode <- function(x){ ## mode
a = table(x) # x is a vector
moda=a[which.max(a)]
inte=as.integer(names(moda))
return(inte)
}
OrganismsExtraCopy <- function(x){ ##how many organisms has an extra copy than the mode
a = table(x) # x is a vector
moda=a[which.max(a)]
inte=as.integer(names(moda)) #the moda
subx<-as.integer(a[which(as.integer(names(a))>inte)]) ## vector of organisms with extra copies
suma<-sum(subx) ## how many
return(suma)
}
OrgAtLeastOneCopy <- function(x){ ##how many organisms has at least one copy
a = table(x) # x is a vector
subx<-as.integer(a[which(as.integer(names(a))>0)]) ## vector of organnisms with at least one copy
suma<-sum(subx) ## how many
return(suma)
}
Copies <- function(x){ ##how many organisms has an extra copy than the mode
suma<-sum(x,na.rm = TRUE) ## how many
return(suma)
}
######## Reading and sorting data
## Read enzyme names. origin(Central/Coelicolor/lividans) and BGC from MiBIG
CoelicolortableExp <- read.csv("Figuras/CoelicolorExpansionBlast.data", header=TRUE, sep="\t")  ### Enzyme BGC Function from MiBIG coelicolor
LividanstableExp <- read.csv("Figuras/LividansExpansionBlast.data", header=TRUE, sep="\t")  ### Enzyme BGC Function from MiBIG coelicolor
tableCentral <- read.csv("Figuras/Central.data", header=TRUE, sep="\t")  ### Enzyme Subsystem Function from central metabolism
CoelicolortableExp$Org<-"coelicolor"
LividanstableExp$Org<-"lividans"
tableExp<-rbind(CoelicolortableExp,LividanstableExp)
rownames(tableExp) <- tableExp[,1]
## Read EvoMining tables (head plots)
tableDistribution <- read.csv("Figuras/CoelicolorEnzymes.Distribution", header=TRUE, row.names=1,sep="\t")  ### Expansions from coelicolor (Heat plot score 0)
LivitableDistribution <- read.csv("Figuras/LiviEnzymes.Distribution", header=TRUE, row.names=1,sep="\t")  ### Expansions from coelicolor (Heat plot score 0)
tableCentralDistribution <- read.csv("Figuras/CentralEnymes.Distribution.csv", header=TRUE, row.names=1,sep="\t") #Expansions from 93 enzimas central metabolism
tableNaturalDistribution<- merge(LivitableDistribution, tableDistribution, by=0, all=TRUE)
rownames(tableNaturalDistribution) <- tableNaturalDistribution[,1]
tableNaturalDistribution$Row.names<-NULL
#str(tableNaturalDistribution)
#tableNaturalDistribution$Enzyme_74
#LivitableDistribution$Enzyme_74
#tableDistribution$Enzyme_74
## both lividans and coelicolor are in one table now
#necesito poner el valor de names de moda en el renglon con el mismo valor en enzima
#number of organisms greater than mode  at least tenpercent of the genome
##Reducing CoelicolortableExp to those I have distribution
tableExp=tableExp[tableExp$Enzyme %in% names(tableNaturalDistribution),]
##str(tableExp)
tableExp <- tableExp[order(tableExp$Enzyme),] ## Sort rows by enzyme
##str(tableExp)
tableNaturalDistribution <- tableNaturalDistribution[,order(names(tableNaturalDistribution))] #Sort columns by table Natural distribution
################# Processing functions BGC data
modaOrOne=apply(tableNaturalDistribution,2, OneOrMode)  ##minimum 1 or moda
moda=apply(tableNaturalDistribution,2, Mode) ## moda
ExtraCopy=apply(tableNaturalDistribution,2, OrganismsExtraCopy) ## HOw many extra copies are
OneCopy=apply(tableNaturalDistribution,2, OrgAtLeastOneCopy)
CopiesEvo=apply(tableNaturalDistribution,2, Copies)
Average=colMeans(tableNaturalDistribution,na.rm = TRUE)
#necesito poner el valor de names de Average en el renglon con el mismo valor en enzima en tableExp
tableExp<-tableExp[match(names(Average), tableExp$Enzyme),]
tableExp$Average<-Average
#Average["Enzyme_215"]
#tableExp["Enzyme_215","Average"]
#tableExp["Enzyme_215","Function"]
tableExp<-tableExp[match(names(moda), tableExp$Enzyme),]
tableExp$Moda<-moda
tableExp["Enzyme_215","Moda"]
tableExp<-tableExp[match(names(ExtraCopy), tableExp$Enzyme),]
tableExp$ExtraCopy=ExtraCopy
ExtraCopy["Enzyme_215"]
tableExp["Enzyme_215","ExtraCopy"]
tableExp<-tableExp[match(names(OneCopy), tableExp$Enzyme),]
tableExp$OneCopy=OneCopy
OneCopy["Enzyme_215"]
tableExp["Enzyme_215","OneCopy"]
tableExp<-tableExp[match(names(CopiesEvo), tableExp$Enzyme),]
tableExp$CopiesEvo=CopiesEvo
CopiesEvo["Enzyme_215"]
tableExp["Enzyme_215","CopiesEvo"]
################# Processing functions central data
CentralmodaOrOne=apply(tableCentralDistribution,2, OneOrMode)
Centralmoda=apply(tableCentralDistribution,2, Mode)
CentralExtraCopy=apply(tableCentralDistribution,2, OrganismsExtraCopy)
CentralOneCopy=apply(tableCentralDistribution,2, OrgAtLeastOneCopy)
CentralCopiesEvo=apply(tableCentralDistribution,2, Copies)
CentralAverage=colMeans(tableCentralDistribution)
tableCentral<-tableCentral[match(names(Centralmoda), tableCentral$Enzyme),]
tableCentral$Moda=Centralmoda
tableCentral<-tableCentral[match(names(CentralAverage), tableCentral$Enzyme),]
tableCentral$Average=CentralAverage
tableCentral<-tableCentral[match(names(CentralExtraCopy), tableCentral$Enzyme),]
tableCentral$ExtraCopy=CentralExtraCopy
tableCentral<-tableCentral[match(names(CentralOneCopy), tableCentral$Enzyme),]
tableCentral$OneCopy=CentralOneCopy
tableCentral<-tableCentral[match(names(CentralCopiesEvo), tableCentral$Enzyme),]
tableCentral$CopiesEvo=CentralCopiesEvo
tableExp$ExpNum=1-tableExp$OneCopy/tableExp$CopiesEvo
tableCentral$ExpNum=1-tableCentral$OneCopy/tableCentral$CopiesEvo
tableExp<-tableExp[order(tableExp$Order),]
#tableCentral$Order=tableCentral$Order+193
tableCentral$Order
tableCentral<-tableCentral[order(tableCentral$Order),]
tableEnzymeReduced=subset(tableExp,tableExp$ExpNum<=.6 & tableExp$ExpNum>= .2 )
tableExp[215,"Org"]<-"AroA"
LivitableDistribution$Enzyme_215
tableCentral$Org<-"Actinobacteria"
tableCentral[69,"Org"]<-"AroA"
tableCentral[69,"Function"]
total <- rbind(tableExp,tableCentral)
todosImage<-ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda))+facet_wrap(~ total$Type)+ geom_point(shape=20) + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$Org, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
#str(CoelicolortableExp)
#CoelicolortableExp$Enzyme
## ploting images
#############################################################################################################################################
require("svglite")
imageCentral= ggplot(tableCentral,aes(x=tableCentral$Order, y=tableCentral$ExpNum, color=tableCentral$BGC, size = tableCentral$Moda))+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
ggplot(tableCentral,aes(x=tableCentral$Order, y=tableCentral$ExpNum, color=tableCentral$BGC, size = tableCentral$Moda))+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
ggsave(file="imageCentral.svg", plot=imageCentral, width=20, height=8)
### Aqui aquellas que no tenian tantos reclutamientos/expansions
figura1<-ggplot(tableEnzymeReduced,aes(x=tableEnzymeReduced$Order, y=tableEnzymeReduced$ExpNum, color=tableEnzymeReduced$BGC, size = tableEnzymeReduced$Moda))+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
StreptoNp <- read.table("Figuras/naturalProductsEnzymeReduced.data", header=TRUE, sep="\t")
figura2<-qplot(x=Central, data=StreptoNp, geom="bar", fill=kingdom, position="stack")+theme_bw()+ theme(legend.position	="bottom",text = element_text(size=8), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5) ,axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5) )
figura3<-qplot(x=Central, data=StreptoNp, geom="bar", fill=taxa, position="stack")+theme_bw()+ theme(legend.position	="bottom",text = element_text(size=8), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5) ,axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5) )
#mm<-count(StreptoNp$Central)
#small<-mm[which(mm$freq<50),]
#str(mm)
#StreptoNpSmall=StreptoNp[StreptoNp$Central %in% small$x,]
#StreptoNp$Central %in% small$x
#qplot(x=Central, data=StreptoNpSmall, geom="bar", fill=kingdom, position="stack")+theme_bw()+ theme(legend.position	="bottom",text = element_text(size=8), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5) ,axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5) )
#qplot(x=Central, data=StreptoNpSmall, geom="bar", fill=taxa, position="stack")+theme_bw()+ theme(legend.position	="bottom",text = element_text(size=8), axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5) ,axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5) )
#kable(CoelicolortableExp,  caption = "CoelicolorExpansions\\label{tab:Coelicolor Expansions}",caption.short = "CoelicolorExpansions")
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$Org, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")+ scale_shape_manual(values = c(0, 5, 6, 15))
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")+ scale_shape_manual(values = c(0, 5, 2, 1))
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")+ scale_shape_manual(values = c(0, 18, 2, 1))
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")+ scale_shape_manual(values = c(0, 8, 2, 1))
View(tableEnzymeReduced)
tableEnzymeSuper=subset(tableExp,tableExp$ExpNum>.6)
View(tableEnzymeSuper)
str(tableEnzymeSuper)
str(tableEnzymeReduced)
tableEnzymeReduced=subset(tableExp,tableExp$ExpNum<.2 )
str(tableEnzymeReduced)
tableEnzymeIntermediate=subset(tableExp,tableExp$ExpNum<=.6 & tableExp$ExpNum>= .2 )
str(tableEnzymeIntermediate)
tableEnzymeSuper=subset(tableExp,tableExp$ExpNum>.6)
str(tableEnzymeSuper)
View(tableEnzymeReduced)
View(tableEnzymeIntermediate)
todosImage<-ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")+ scale_shape_manual(values = c(0, 8, 2, 1))
ggsave(file="Figuras/todosImage.svg", plot=todosImage, width=20, height=8)
todosImage<-ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")+ scale_shape_manual(values = c(0, 8, 2, 1))+ scale_y_continuous(breaks=c(.1, .2,.3, .5, .6,.8))
ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")+ scale_shape_manual(values = c(0, 8, 2, 1))+ scale_y_continuous(breaks=c(.1, .2,.3, .5, .6,.8))
todosImage<-ggplot(total,aes(x=total$Order, y=total$ExpNum,  color=total$BGC, size = total$Moda, shape=total$Org))+facet_wrap(~ total$Type)+ geom_point() + labs(x = "Metabolic Families", y = "Exp Number Actinobacteria Genomes",text = element_text(size=12)) + theme_bw()+theme(plot.title = element_text(size = 20, face = "bold"), text = element_text(size = 14), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 16), legend.position = "right")+ scale_shape_manual(values = c(0, 8, 2, 1))+ scale_y_continuous(breaks=c(0,.1, .2,.3,.4,.5, .6,.7,.8,.9,1))
ggsave(file="Figuras/todosImage.svg", plot=todosImage, width=20, height=8)
View(tableEnzymeIntermediate)
# This chunk ensures that the reedtemplates package is installed and loaded
# This reedtemplates package includes the template files for the thesis and also
# two functions used for labeling and referencing
if(!require(devtools))
install.packages("devtools", repos = "http://cran.rstudio.com")
if(!require(reedtemplates)){
library(devtools)
devtools::install_github("ismayc/reedtemplates")
}
library(reedtemplates)
# List of packages required for this analysis
pkg <- c("dplyr", "ggplot2", "knitr", "devtools","RColorBrewer")
# Check if packages are not installed and assign the
# names of the packages not installed to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg))
install.packages(new.pkg, repos = "http://cran.rstudio.com")
# Load packages
library(dplyr)
library(plyr)
library(reshape)
library(ggplot2)
library(knitr)
library(RColorBrewer)
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
library(genstats) ## Next libraries are for coursera
# List of packages required for this analysis
pkg <- c("dplyr", "ggplot2", "knitr", "devtools","RColorBrewer")
# Check if packages are not installed and assign the
# names of the packages not installed to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg))
install.packages(new.pkg, repos = "http://cran.rstudio.com")
# Load packages
library(dplyr)
library(plyr)
library(reshape)
library(ggplot2)
library(knitr)
library(RColorBrewer)
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
#library(genstats) ## Next libraries are for coursera
library(devtools)
library(Biobase)
library(scales) #
library(xlsx) # For save data on excel
install.packages("xlsx")
# List of packages required for this analysis
pkg <- c("dplyr", "ggplot2", "knitr", "devtools","RColorBrewer")
# Check if packages are not installed and assign the
# names of the packages not installed to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg))
install.packages(new.pkg, repos = "http://cran.rstudio.com")
# Load packages
library(dplyr)
library(plyr)
library(reshape)
library(ggplot2)
library(knitr)
library(RColorBrewer)
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
#library(genstats) ## Next libraries are for coursera
library(devtools)
library(Biobase)
library(scales) #
#library(xlsx) # For save data on excel
docking <- read.csv("chapter2/SmallHeat.data", header=TRUE, sep="\t")
EnzymeOrder=factor(docking$Enzima,levels=unique(docking$Enzima))
docking.m <- melt(docking,id = "Enzima")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$Enzima <- factor(docking.m$Enzima, levels = rev(docking.m$Enzima[order(EnzymeOrder)]))
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=Enzima)) + labs(x = "Substrates", y = "Enzymes",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=Enzima)) + labs(x = "Substrates", y = "Enzymes",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave("chapter2/colorHeatPlot.pdf", plot = colorHeatPlot,height = 36, width = 24)
ggsave("chapter2/colorHeatPlot.pdf", plot = colorHeatPlot,height = 36, width = 24)
gcolor <- ggplot_build(colorHeatPlot)
ggplot(docking.m, aes(x=variable, y=Enzima)) + labs(x = "Substrates", y = "Enzymes",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
# This chunk ensures that the reedtemplates package is installed and loaded
# This reedtemplates package includes the template files for the thesis and also
# two functions used for labeling and referencing
if(!require(devtools))
install.packages("devtools", repos = "http://cran.rstudio.com")
if(!require(reedtemplates)){
library(devtools)
devtools::install_github("ismayc/reedtemplates")
}
library(reedtemplates)
# List of packages required for this analysis
pkg <- c("dplyr", "ggplot2", "knitr", "devtools","RColorBrewer")
# Check if packages are not installed and assign the
# names of the packages not installed to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg))
install.packages(new.pkg, repos = "http://cran.rstudio.com")
# Load packages
library(dplyr)
library(plyr)
library(reshape)
library(ggplot2)
library(knitr)
library(RColorBrewer)
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
#library(genstats) ## Next libraries are for coursera
library(devtools)
library(Biobase)
library(scales) #
#library(xlsx) # For save data on excel
docking <- read.csv("chapter2/SmallHeat.data", header=TRUE, sep="\t")
EnzymeOrder=factor(docking$Enzima,levels=unique(docking$Enzima))
docking.m <- melt(docking,id = "Enzima")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$Enzima <- factor(docking.m$Enzima, levels = rev(docking.m$Enzima[order(EnzymeOrder)]))
ggplot(docking.m, aes(x=variable, y=Enzima)) + labs(x = "Substrates", y = "Enzymes",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=Enzima)) + labs(x = "Substrates", y = "Enzymes",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave("chapter2/colorHeatPlot.pdf", plot = colorHeatPlot,height = 36, width = 24)
gcolor <- ggplot_build(colorHeatPlot)
#gcolor$data[[1]]["fill"]
#gcolor$data[[1]]
write.xlsx(gcolor$data[[1]], "chapter2/mydataColor.xlsx")
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
docking
genomeOrder=factor(docking$genome,levels=unique(docking$Enzima))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking <- read.csv("chapter2/table15", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$Enzima))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=Enzima)) + labs(x = "Substrates", y = "Enzymes",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
genomeOrder
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
genomeOrder
docking <- read.csv("chapter2/table15", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
View(docking)
ggsave(file="chapter2/BigSCAPEheatplot.svg", plot=colorHeatPlot, width=10, height=10)
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot.svg", plot=colorHeatPlot, width=10, height=10)
docking <- read.csv("chapter2/table15", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot15.svg", plot=colorHeatPlot, width=10, height=10)
docking <- read.csv("chapter2/table10", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot15.svg", plot=colorHeatPlot, width=10, height=10)
ggsave(file="chapter2/BigSCAPEheatplot10.svg", plot=colorHeatPlot, width=10, height=10)
docking <- read.csv("chapter2/table10", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot10.svg", plot=colorHeatPlot, width=10, height=10)
#gcolor$data[[1]]["fill"]
#gcolor$data[[1]]
docking <- read.csv("chapter2/table15", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot15.svg", plot=colorHeatPlot, width=10, height=10)
#gcolor$data[[1]]["fill"]
#gcolor$data[[1]]
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=10)
#gcolor$data[[1]]["fill"]
#gcolor$data[[1]]
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=15)
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=15)
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none",plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none"plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none",plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
# This chunk ensures that the reedtemplates package is installed and loaded
# This reedtemplates package includes the template files for the thesis and also
# two functions used for labeling and referencing
if(!require(devtools))
install.packages("devtools", repos = "http://cran.rstudio.com")
if(!require(reedtemplates)){
library(devtools)
devtools::install_github("ismayc/reedtemplates")
}
library(reedtemplates)
# List of packages required for this analysis
pkg <- c("dplyr", "ggplot2", "knitr", "devtools","RColorBrewer")
# Check if packages are not installed and assign the
# names of the packages not installed to the variable new.pkg
new.pkg <- pkg[!(pkg %in% installed.packages())]
# If there are any packages in the list that aren't installed,
# install them
if (length(new.pkg))
install.packages(new.pkg, repos = "http://cran.rstudio.com")
# Load packages
library(dplyr)
library(plyr)
library(reshape)
library(ggplot2)
library(knitr)
library(RColorBrewer)
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
#library(genstats) ## Next libraries are for coursera
library(devtools)
library(Biobase)
library(scales) #
#library(xlsx) # For save data on excel
docking <- read.csv("chapter2/table05", header=TRUE, sep="\t")
genomeOrder=factor(docking$genome,levels=unique(docking$genome))
docking.m <- melt(docking,id = "genome")
docking.m <- ddply(docking.m, .(variable), transform,rescale = rescale(value))
docking.m$genome <- factor(docking.m$genome, levels = rev(docking.m$genome[order(genomeOrder)]))
ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Substrates", y = "genome",text = element_text(size=12))+ geom_raster(aes(fill=value))+theme_bw()+theme(plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
##on colors
colorHeatPlot<-ggplot(docking.m, aes(x=variable, y=genome)) + labs(x = "Gene cluster Families", y = "genome",text = element_text(size=12))+geom_raster(aes(fill=value))+theme_bw()+theme(legend.position="none",plot.title = element_text(size = 14, face = "bold"), text = element_text(size = 12), axis.title = element_text(face="bold"), axis.text.x=element_text(angle = 90,size = 6))+ scale_fill_gradientn(colours = hm.palette(100),na.value = "gray")
ggsave(file="chapter2/BigSCAPEheatplot05.svg", plot=colorHeatPlot, width=10, height=15)
#gcolor$data[[1]]["fill"]
#gcolor$data[[1]]
